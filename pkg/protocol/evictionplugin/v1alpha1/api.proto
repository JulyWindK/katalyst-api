/*
Copyright 2022 The Katalyst Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = 'proto3';

package evictionplugin.v1alpha1;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "k8s.io/api/core/v1/generated.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

option go_package = "./v1alpha1";

enum ThresholdMetType {
    NOT_MET = 0;
    SOFT_MET = 1;
    HARD_MET = 2;
}

enum ThresholdOperator {
    LESS_THAN = 0;
    GREATER_THAN = 1;
}

enum ConditionType {
    NODE_CONDITION = 0;
    CNR_CONDITION = 1;
}

message Empty {
}

message Condition {
    ConditionType condition_type = 1;
    repeated string effects = 2;
    string condition_name = 3;
    bool met_condition = 4;
}

message ThresholdMetResponse {
    double threshold_value = 1;
    double observed_value = 2;
    ThresholdOperator threshold_operator = 3;
    ThresholdMetType met_type = 4;
    string eviction_scope = 5;
    int64 grace_period_seconds = 6;
    Condition condition = 7;
}

message GetTopEvictionPodsRequest {
    repeated k8s.io.api.core.v1.Pod active_pods = 1;
    uint64 topN = 2;
    string eviction_scope = 3;
}

message GetTopEvictionPodsResponse {
    repeated k8s.io.api.core.v1.Pod target_pods = 1;
    DeletionOptions deletion_options = 2;
}

message EvictPod {
    k8s.io.api.core.v1.Pod pod = 1;
    string reason = 2;
    DeletionOptions deletion_options = 3;
    bool force_evict = 4;
    string eviction_plugin_name = 5;
}

message GetEvictPodsRequest {
    repeated k8s.io.api.core.v1.Pod active_pods = 1;
}

message GetEvictPodsResponse {
    repeated EvictPod evict_pods = 1;
    Condition condition = 2;
}

message DeletionOptions {
    int64 grace_period_seconds = 1;
}

service EvictionPlugin {
    rpc ThresholdMet(Empty) returns (ThresholdMetResponse) {}
    rpc GetTopEvictionPods(GetTopEvictionPodsRequest) returns (GetTopEvictionPodsResponse) {}
    rpc GetEvictPods(GetEvictPodsRequest) returns (GetEvictPodsResponse) {}
}
